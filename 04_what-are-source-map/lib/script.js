//                                      SUMMARY NOTE - JSX and Babel

// NOTE-1: Babel is a JavaScript compiler that converts modern JavaScript (ES6+) or JSX code into backward-compatible JavaScript code
//         that can run in older browsers or environments

// NOTE-2: For using Babel in development, include the Babel CDN in the <head> tag and set type="text/babel" on your custom JS file script.
//         Basically, the default value of the type attribute is "text/javascript", so when we set this, the browser sends the request normally.
//         But when we set type="text/xyz" or any random value, the browser does not send the request or execute it directly.
//         So, when we set type="text/babel", the browser doesn’t execute the JSX code itself — the Babel compiler handles it and
//         converts it into JavaScript ie.React.createElement()..  code  that is compatible with the browser.

// NOTE-3: So yes, the browser doesn’t directly send a request for our JS file. Instead, after including Babel and related files,
//          Babel sends a request for our JS file, transforms it into browser-compatible JavaScript (like React.createElement() syntax),
//          and then embeds it into the index.html file after our JS script tag.
//
//          A source map is also generated — it allows the browser to execute the transformed JS code but still show
//          the original source (our script file) in DevTools. This behavior depends on the “Enable JavaScript source maps”
//          setting in the browser’s developer options.

// NOTE-4: When a request is sent for a JS file containing JSX syntax, Babel receives the response as the entire JS file
//          (including the JSX code) in string format before transforming it into browser-compatible JavaScript.

// NOTE-5: For using any js code or any variable in JSX put into {} curly braces it help for  changing dynamic value IN the transform file generated by
//         babel our code is look in that syntax from which we familiar in React.createElement()...       refer:note-2.png

// NOTE-6: If we put console.log() inside curly braces although it's js code but it take here as return value of this i.e undefined and react does't
//         show this value on browser , some value like undefined , null , true , false not show on browser for some reason if we want to print either
//        in give in Jsx means direct inside tag as text or put in the string formate inside curly braces if we want to give as js code into it .

//           < Now using Babel as CLI by install using npm >

// command follow
// npm init -y
// npm install --save-dev @babel/core @babel/cli
// build": "babel src -d lib     < adding this into our package.json scripts and give our file path and here output file name is lib
// npm run build                 < show error SyntaxError: C:\Users\Dheeraj\OneDrive\Desktop\Webdev25\React-js\JSX and babel\script.js:
//                                  Support for the experimental syntax 'jsx' isn't currently enabled >
//                               <fix it by adding file .bable.rc and add some code so this is babel config file
//                                     {
//                                          "presets": ["@babel/preset-env", "@babel/preset-react"]
//                                                                     }
// npm i @babel/preset-react -D                 install module @babel/preset-react

// npm run build                               < now a new  script.js show in lib folder> i.e transform jsx file
//
//
//

const container = /*#__PURE__*/React.createElement("div", {
  className: "container",
  id: "container"
}, /*#__PURE__*/React.createElement("section", null, /*#__PURE__*/React.createElement("p", null, "The library for web and native user interfaces"), /*#__PURE__*/React.createElement("img", {
  src: "https://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/React-icon.svg/512px-React-icon.svg.png",
  style: {
    width: 200,
    backgroundColor: 'teal',
    borderRadius: 8,
    padding: 16
  }
})), /*#__PURE__*/React.createElement("section", null, /*#__PURE__*/React.createElement("form", null, /*#__PURE__*/React.createElement("div", {
  className: "input-group"
}, /*#__PURE__*/React.createElement("label", {
  htmlFor: "username"
}, "Username"), /*#__PURE__*/React.createElement("input", {
  id: "username"
})), /*#__PURE__*/React.createElement("div", {
  className: "input-group"
}, /*#__PURE__*/React.createElement("label", {
  htmlFor: "password"
}, "Password"), /*#__PURE__*/React.createElement("input", {
  id: "password",
  type: "password"
})))));

// const user = 'Dheeraj'

// const h2 = <h2>Hello {user}</h2>

const root = ReactDOM.createRoot(document.querySelector('#root'));

// root.render(h2)
root.render(container);