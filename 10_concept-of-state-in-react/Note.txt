//                                   <<<<<    State in React   >>>>>>

// Note_IMp : Hooks can only be called inside the functional component

// Note-1:Earlier, when we tried to update a variable, the UI did not automatically re-render to show the updated value. We had to manually 
//        re-render the entire component to see the change on the browser. However, Parcel showed a warning because calling root.render() 
//        multiple times (for example, once in the parent and again in the child component) is not allowed in React 18 and above.
// Although one possible workaround is to pass the root object from the parent to the child as a prop, this is not a recommended approach.
// The proper and modern solution is to use React State, which automatically triggers re-rendering whenever the state value changes.

// Note-2: while we re-render manually React not re-render the entire component is use some Optimization using virtual Dom it compare the 
//         new and old component and re-render only that value which we update So this way is used , But still for re-render this way not 
//         recommended approach 

// Note-3: After Component in React , State is the second major thing in React , we declare state variable using useState Hook the function start
///         with 'use" in react that function is Hook e.g useState, useEffect....
//       >>  Hooks are special functions in React that let you “hook into” React features like state, lifecycle, and context in functional 
//           components.
// 
// Note-4: When we console.log(useState()), it returns an array of two elements (see note-useState.png).
//         The first element is the current state value (the value we pass to useState as the initial state).
//         The second element is the updater function, which allows us to update that value later.
//         When we call this updater function, React automatically re-renders the component and updates
//         the UI with the new state value — no manual re-rendering is required.
//         By convention, we name the updater function starting with 'set' followed by the state variable
//         name in camelCase. Example: count → setCount
//
// Note-5: A common confusion is: if we declare the state variable using 'const', how can it be updated again?
//         The answer is that we are not directly changing the variable itself. Instead, React stores the state
//         internally and gives us a new value each time the component re-renders. When we call the updater
//         function (e.g., setCount), React compares the new value with the previous one, and if it has changed,
//         it triggers a re-render of the component with the updated state.


// Note-6: useState is a special React Hook that allows functional components to remember values
//         between re-renders. It works using the concept of closures — React keeps track of the
//         state variable’s value across multiple function calls by storing it internally.
//         Each time the component re-renders, React retrieves the correct state value from
//         its internal memory (based on the order of Hook calls).
//         Although it behaves like memoization, it’s actually React’s internal state mechanism
//         that remembers and manages these values efficiently.

// Note-7: SO, while we updating the state variable use setState that update only that node value not entire component 
